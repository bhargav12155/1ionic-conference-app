{"version":3,"file":"src_app_pages_map_map_module_ts.js","mappings":"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","sources":["./src/app/pages/map/map-routing.module.ts","./src/app/pages/map/map.module.ts","./src/app/pages/map/map.page.ts","./src/app/pages/map/map.page.html"],"sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { MapPage } from \"./map.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: MapPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MapPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { MapPageRoutingModule } from \"./map-routing.module\";\nimport { MapPage } from \"./map.page\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, MapPageRoutingModule],\n  declarations: [MapPage],\n})\nexport class MapPageModule {}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  NgZone,\n} from \"@angular/core\";\nimport { ToastController } from \"@ionic/angular\";\nimport { GeofenceService } from \"../../providers/geofence.service\";\n\ndeclare const google: any;\n\n@Component({\n  selector: \"app-map\",\n  templateUrl: \"./map.page.html\",\n  styleUrls: [\"./map.page.scss\"],\n})\nexport class MapPage implements OnInit, AfterViewInit {\n  @ViewChild(\"mapPlotting\", { static: false }) mapElement: ElementRef;\n\n  map: any;\n  marker: any;\n  polygons: any[] = [];\n  currentPolygon: any = null;\n  allPolygonsData: any[][] = [];\n  currentPolygonPoints: any[] = [];\n  isInsidePolygon: boolean = false;\n  statusText: string =\n    \"Click 'Draw Polygon' to start drawing a custom geofence\";\n  wasInPolygon: boolean = false;\n  isDrawing: boolean = false;\n  drawingManagerEnabled: boolean = false;\n  drawingManager: any;\n  tempMarkers: any[] = [];\n  polygonCount: number = 0;\n  apiKey = \"AIzaSyABw7DX0sg8fmhPt9H6JdlIGO-GikNgWhI\";\n  enterSound: HTMLAudioElement;\n  exitSound: HTMLAudioElement;\n\n  constructor(\n    private toastCtrl: ToastController,\n    private geofenceService: GeofenceService,\n    private ngZone: NgZone\n  ) {\n    this.enterSound = new Audio(\"/assets/sounds/chime.mp3\");\n    this.exitSound = new Audio(\"/assets/sounds/chime.mp3\");\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    this.loadGoogleMaps();\n  }\n\n  loadGoogleMaps() {\n    if (typeof google !== \"undefined\") {\n      this.initializeMap();\n    } else {\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=geometry,drawing`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        this.initializeMap();\n      };\n      document.head.appendChild(script);\n    }\n  }\n\n  initializeMap() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const userLatLng = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          this.createMapAt(userLatLng, 20);\n        },\n        (error) => {\n          console.error(\"Error getting user location:\", error);\n          this.handleLocationError(error);\n          const fallbackLatLng = { lat: 10.6918, lng: -61.2225 };\n          this.createMapAt(fallbackLatLng, 12);\n        },\n        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 } // Add these options\n      );\n    } else {\n      console.warn(\"Geolocation is not supported by this browser.\");\n      const fallbackLatLng = { lat: 10.6918, lng: -61.2225 };\n      this.createMapAt(fallbackLatLng, 12);\n    }\n  }\n  private handleLocationError(error: any) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        this.toastCtrl\n          .create({\n            message: \"User denied the request for Geolocation.\",\n            duration: 3000,\n          })\n          .then((toast) => toast.present());\n        break;\n      case error.POSITION_UNAVAILABLE:\n        this.toastCtrl\n          .create({\n            message: \"Location information is unavailable.\",\n            duration: 3000,\n          })\n          .then((toast) => toast.present());\n        break;\n      case error.TIMEOUT:\n        this.toastCtrl\n          .create({\n            message: \"The request to get user location timed out.\",\n            duration: 3000,\n          })\n          .then((toast) => toast.present());\n        break;\n      case error.UNKNOWN_ERROR:\n        this.toastCtrl\n          .create({\n            message: \"An unknown error occurred.\",\n            duration: 3000,\n          })\n          .then((toast) => toast.present());\n        break;\n    }\n  }\n  createMapAt(centerLatLng: { lat: number; lng: number }, zoomLevel: number) {\n    const mapOptions = {\n      center: centerLatLng,\n      zoom: zoomLevel, // Use the passed zoomLevel\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n    };\n\n    this.map = new google.maps.Map(this.mapElement.nativeElement, mapOptions);\n\n    // Create draggable marker at center\n    this.marker = new google.maps.Marker({\n      position: centerLatLng,\n      map: this.map,\n      draggable: true,\n      title: \"Drag me to simulate movement!\",\n    });\n\n    // Listen to marker drag events\n    this.marker.addListener(\"dragend\", () => {\n      this.checkPolygonStatus();\n    });\n\n    // Enable polygon drawing\n    this.enablePolygonDrawing(); // Assuming you have this method defined\n\n    // Initial status check\n    this.checkPolygonStatus(); // Assuming you have this method defined\n  }\n\n  enablePolygonDrawing() {\n    // Remove the old click listener for automatic polygon creation\n    // We'll now use manual drawing methods\n    this.statusText = \"Click 'Draw Polygon' to start drawing a custom geofence\";\n  }\n\n  startDrawing() {\n    // Don't clear existing polygons - allow multiple polygons\n    this.ngZone.run(() => {\n      this.isDrawing = true;\n      this.currentPolygonPoints = [];\n      this.statusText = \"Click on the map to add points to your polygon\";\n    });\n\n    // Add click listener for polygon drawing\n    this.map.addListener(\"click\", this.onMapClick.bind(this));\n  }\n\n  onMapClick(event: any) {\n    if (!this.isDrawing) return;\n\n    const latLng = event.latLng;\n    this.currentPolygonPoints.push({\n      lat: latLng.lat(),\n      lng: latLng.lng(),\n    });\n\n    // Add a temporary marker to show the point\n    const colors = [\n      \"#FF0000\",\n      \"#00FF00\",\n      \"#0000FF\",\n      \"#FFFF00\",\n      \"#FF00FF\",\n      \"#00FFFF\",\n    ];\n    const color = colors[this.polygonCount % colors.length];\n\n    const tempMarker = new google.maps.Marker({\n      position: latLng,\n      map: this.map,\n      icon: {\n        path: google.maps.SymbolPath.CIRCLE,\n        scale: 6,\n        fillColor: color,\n        fillOpacity: 1,\n        strokeWeight: 2,\n        strokeColor: \"#FFFFFF\",\n      },\n    });\n    this.tempMarkers.push(tempMarker);\n\n    this.ngZone.run(() => {\n      this.statusText = `Points added: ${this.currentPolygonPoints.length}. Click 'Finish' when done (minimum 3 points)`;\n    });\n  }\n\n  async finishDrawing() {\n    if (!this.isDrawing || this.currentPolygonPoints.length < 3) {\n      return;\n    }\n\n    this.ngZone.run(() => {\n      this.isDrawing = false;\n    });\n\n    google.maps.event.clearListeners(this.map, \"click\");\n\n    // Clear temporary markers\n    this.tempMarkers.forEach((marker) => marker.setMap(null));\n    this.tempMarkers = [];\n\n    // Create the polygon with different colors for each polygon\n    const colors = [\n      \"#FF0000\",\n      \"#00FF00\",\n      \"#0000FF\",\n      \"#FFFF00\",\n      \"#FF00FF\",\n      \"#00FFFF\",\n    ];\n    const color = colors[this.polygonCount % colors.length];\n\n    const polygonData = [...this.currentPolygonPoints];\n    this.currentPolygon = new google.maps.Polygon({\n      paths: polygonData,\n      strokeColor: color,\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: color,\n      fillOpacity: 0.35,\n      editable: true,\n    });\n\n    this.currentPolygon.setMap(this.map);\n\n    // Store the polygon and its data\n    this.polygons.push(this.currentPolygon);\n    this.allPolygonsData.push(polygonData);\n    this.polygonCount++;\n\n    // Send the new geofence to backend API\n    await this.sendGeofenceToBackend(polygonData, this.polygonCount);\n\n    this.ngZone.run(() => {\n      this.statusText = `Polygon ${this.polygonCount} created and sent to backend! Total polygons: ${this.polygons.length}. Drag marker to test geofences.`;\n    });\n\n    this.checkPolygonStatus();\n\n    // Add listener for polygon editing\n    this.currentPolygon.addListener(\"set_at\", () => {\n      this.updatePolygonPoints();\n    });\n\n    this.currentPolygon.addListener(\"insert_at\", () => {\n      this.updatePolygonPoints();\n    });\n\n    // Reset current polygon points\n    this.currentPolygonPoints = [];\n  }\n\n  updatePolygonPoints() {\n    // Update polygon data when edited\n    this.polygons.forEach((polygon, index) => {\n      const path = polygon.getPath();\n      this.allPolygonsData[index] = [];\n      path.forEach((latLng: any) => {\n        this.allPolygonsData[index].push({\n          lat: latLng.lat(),\n          lng: latLng.lng(),\n        });\n      });\n    });\n    this.checkPolygonStatus();\n  }\n\n  enableDrawingManager() {\n    // Always allow enabling drawing tools, even after clearing\n    if (this.drawingManager) {\n      this.drawingManager.setMap(null);\n      this.drawingManager = null;\n      this.drawingManagerEnabled = false;\n    }\n\n    this.drawingManager = new google.maps.drawing.DrawingManager({\n      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          google.maps.drawing.OverlayType.POLYGON,\n          google.maps.drawing.OverlayType.CIRCLE,\n          google.maps.drawing.OverlayType.RECTANGLE,\n        ],\n      },\n      polygonOptions: {\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#FF0000\",\n        fillOpacity: 0.35,\n        editable: true,\n      },\n    });\n\n    this.drawingManager.setMap(this.map);\n    this.drawingManagerEnabled = true;\n\n    google.maps.event.addListener(\n      this.drawingManager,\n      \"overlaycomplete\",\n      (event: any) => {\n        // Don't clear existing polygons - add to the collection\n        const colors = [\n          \"#FF0000\",\n          \"#00FF00\",\n          \"#0000FF\",\n          \"#FFFF00\",\n          \"#FF00FF\",\n          \"#00FFFF\",\n        ];\n        const color = colors[this.polygonCount % colors.length];\n\n        // Update the new polygon's appearance\n        event.overlay.setOptions({\n          strokeColor: color,\n          fillColor: color,\n          editable: true,\n        });\n\n        this.polygons.push(event.overlay);\n        const path = event.overlay.getPath();\n        const polygonData: any[] = [];\n\n        path.forEach((latLng: any) => {\n          polygonData.push({\n            lat: latLng.lat(),\n            lng: latLng.lng(),\n          });\n        });\n\n        this.allPolygonsData.push(polygonData);\n        this.polygonCount++;\n\n        this.ngZone.run(() => {\n          this.statusText = `Polygon ${this.polygonCount} created with drawing tools! Total: ${this.polygons.length}`;\n        });\n\n        this.checkPolygonStatus();\n\n        // Add listeners for editing\n        event.overlay.addListener(\"set_at\", () => {\n          this.updatePolygonPoints();\n        });\n\n        event.overlay.addListener(\"insert_at\", () => {\n          this.updatePolygonPoints();\n        });\n      }\n    );\n  }\n\n  clearPolygon() {\n    // Clear the last polygon only\n    if (this.polygons.length > 0) {\n      const lastPolygon = this.polygons.pop();\n      lastPolygon?.setMap(null);\n      this.allPolygonsData.pop();\n      this.polygonCount = Math.max(0, this.polygonCount - 1);\n    }\n\n    // Clear temporary markers\n    this.tempMarkers.forEach((marker) => marker.setMap(null));\n    this.tempMarkers = [];\n\n    // Stop drawing mode if active\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      google.maps.event.clearListeners(this.map, \"click\");\n      this.currentPolygonPoints = [];\n    }\n\n    this.ngZone.run(() => {\n      if (this.polygons.length === 0) {\n        this.statusText =\n          \"Click 'Draw Polygon' to start drawing a custom geofence\";\n        this.isInsidePolygon = false;\n      } else {\n        this.statusText = `${this.polygons.length} polygon(s) remaining. Drag marker to test geofences.`;\n        this.checkPolygonStatus();\n      }\n    });\n  }\n\n  clearAllPolygons() {\n    // Clear all polygons\n    this.polygons.forEach((polygon) => polygon.setMap(null));\n    this.polygons = [];\n    this.allPolygonsData = [];\n    this.polygonCount = 0;\n\n    // Clear temporary markers\n    this.tempMarkers.forEach((marker) => marker.setMap(null));\n    this.tempMarkers = [];\n\n    // Stop drawing mode if active\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      google.maps.event.clearListeners(this.map, \"click\");\n      this.currentPolygonPoints = [];\n    }\n\n    // Clear drawing manager if enabled\n    if (this.drawingManager) {\n      this.drawingManager.setMap(null);\n      this.drawingManager = null;\n    }\n    this.drawingManagerEnabled = false;\n\n    this.ngZone.run(() => {\n      this.statusText =\n        \"All polygons cleared. Click 'Draw Polygon' to start drawing.\";\n      this.isInsidePolygon = false;\n    });\n  }\n\n  checkPolygonStatus() {\n    if (this.polygons.length === 0 || !this.marker) {\n      return;\n    }\n\n    const markerPosition = this.marker.getPosition();\n    let isInsideAny = false;\n    let polygonIndex = -1;\n\n    // Check if marker is inside any polygon\n    for (let i = 0; i < this.polygons.length; i++) {\n      const isInside = google.maps.geometry.poly.containsLocation(\n        markerPosition,\n        this.polygons[i]\n      );\n      if (isInside) {\n        isInsideAny = true;\n        polygonIndex = i + 1;\n        break;\n      }\n    }\n\n    this.isInsidePolygon = isInsideAny;\n\n    this.ngZone.run(() => {\n      if (isInsideAny) {\n        this.statusText = `Inside Geofence ${polygonIndex}`;\n      } else {\n        this.statusText = `Outside all geofences (${this.polygons.length} total)`;\n      }\n    });\n\n    // Handle geofence transitions\n    if (!this.wasInPolygon && isInsideAny) {\n      // Entering geofence\n      this.wasInPolygon = true;\n      this.handleGeofenceEntry(polygonIndex);\n    } else if (this.wasInPolygon && !isInsideAny) {\n      // Exiting geofence\n      this.wasInPolygon = false;\n      this.handleGeofenceExit();\n    }\n  }\n\n  async handleGeofenceEntry(polygonIndex?: number) {\n    const polygonText = polygonIndex ? ` ${polygonIndex}` : \"\";\n    console.log(`Entered geofence area${polygonText}`);\n\n    // Play sound\n    this.enterSound\n      .play()\n      .catch((error) => console.error(\"Error playing enter sound:\", error));\n\n    // Record event in GeofenceService\n    this.geofenceService.addMockEvent(\"enter\");\n\n    // Show toast notification\n    const toast = await this.toastCtrl.create({\n      header: \"Geofence Entry\",\n      message: `You have entered geofence${polygonText}!`,\n      duration: 3000,\n      color: \"success\",\n      position: \"top\",\n    });\n    await toast.present();\n  }\n\n  async handleGeofenceExit() {\n    console.log(\"Exited geofence area\");\n\n    // Play sound\n    this.exitSound\n      .play()\n      .catch((error) => console.error(\"Error playing exit sound:\", error));\n\n    // Record event in GeofenceService\n    this.geofenceService.addMockEvent(\"exit\");\n\n    // Show toast notification\n    const toast = await this.toastCtrl.create({\n      header: \"Geofence Exit\",\n      message: \"You have left the geofence area!\",\n      duration: 3000,\n      color: \"warning\",\n      position: \"top\",\n    });\n    await toast.present();\n  }\n\n  async fetchExternalEvents(): Promise<any[]> {\n    try {\n      const response = await fetch(\"https://loc-end.onrender.com/api/location\");\n      if (!response.ok) throw new Error(\"API request failed\");\n      const data = await response.json();\n      // Sanitize and adapt API response to geofence event objects\n      if (!Array.isArray(data)) return [];\n      return data.map((event: any) => {\n        // Always return location as an object\n        let location = { latitude: null, longitude: null };\n        if (event.lat !== undefined && event.lng !== undefined) {\n          location = { latitude: event.lat, longitude: event.lng };\n        }\n        // Extract ip address and device platform from nested arrays\n        let ipAddress = \"_\";\n        let deviceType = \"_\";\n        if (\n          Array.isArray(event.network) &&\n          event.network[0] &&\n          event.network[0].ip\n        ) {\n          ipAddress = event.network[0].ip;\n        }\n        if (\n          Array.isArray(event.device) &&\n          event.device[0] &&\n          event.device[0].platform\n        ) {\n          deviceType = event.device[0].platform;\n        }\n        return {\n          timestamp:\n            event.timestamp ??\n            event.entryTimestamp ??\n            event.exitTimestamp ??\n            null,\n          locationName:\n            event.locationName ?? event.location ?? event.name ?? \"_\",\n          // userId removed\n          phoneNumber: event.phoneNumber ?? event.phone ?? \"_\",\n          email: event.email ?? \"_\",\n          ipAddress,\n          deviceType,\n          type:\n            event.type ??\n            (event.entryTimestamp\n              ? \"enter\"\n              : event.exitTimestamp\n              ? \"exit\"\n              : \"_\"),\n          entryTimestamp: event.entryTimestamp ?? null,\n          exitTimestamp: event.exitTimestamp ?? null,\n          userDeviceInfo: event.userDeviceInfo ?? \"_\",\n          location,\n        };\n      });\n    } catch (error) {\n      console.error(\"Error fetching external events:\", error);\n      return [];\n    }\n  }\n\n  // Send geofence to backend API\n  async sendGeofenceToBackend(polygonPoints: any[], polygonNumber: number) {\n    try {\n      // Calculate centroid of the polygon\n      const centroid = this.calculatePolygonCentroid(polygonPoints);\n\n      // Calculate approximate radius (distance from centroid to farthest point)\n      const radius = this.calculatePolygonRadius(polygonPoints, centroid);\n\n      // Create geofence data\n      const geofenceData = {\n        name: `Geofence ${polygonNumber}`,\n        lat: centroid.lat,\n        lng: centroid.lng,\n        radius: Math.round(radius), // Round to nearest meter\n        activeFrom: new Date().toISOString(),\n        activeTo: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Active for 24 hours\n      };\n\n      // Send to backend using the geofence service\n      const result = await this.geofenceService.sendPolygonsToBackend([\n        geofenceData,\n      ]);\n\n      console.log(\"Geofence sent to backend:\", result[0]);\n\n      // Show success toast\n      const toast = await this.toastCtrl.create({\n        message: `Geofence \"${geofenceData.name}\" sent to backend successfully!`,\n        duration: 3000,\n        color: \"success\",\n        position: \"top\",\n      });\n      await toast.present();\n    } catch (error) {\n      console.error(\"Error sending geofence to backend:\", error);\n\n      // Show error toast\n      const toast = await this.toastCtrl.create({\n        message: \"Failed to send geofence to backend\",\n        duration: 3000,\n        color: \"danger\",\n        position: \"top\",\n      });\n      await toast.present();\n    }\n  }\n\n  // Calculate centroid (center point) of a polygon\n  calculatePolygonCentroid(points: any[]): { lat: number; lng: number } {\n    let centroidLat = 0;\n    let centroidLng = 0;\n\n    for (const point of points) {\n      centroidLat += point.lat;\n      centroidLng += point.lng;\n    }\n\n    return {\n      lat: centroidLat / points.length,\n      lng: centroidLng / points.length,\n    };\n  }\n\n  // Calculate approximate radius of polygon (distance from centroid to farthest point)\n  calculatePolygonRadius(\n    points: any[],\n    centroid: { lat: number; lng: number }\n  ): number {\n    let maxDistance = 0;\n\n    for (const point of points) {\n      const distance = this.calculateDistance(\n        centroid.lat,\n        centroid.lng,\n        point.lat,\n        point.lng\n      );\n      maxDistance = Math.max(maxDistance, distance);\n    }\n\n    return maxDistance;\n  }\n\n  // Calculate distance between two points in meters\n  calculateDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number\n  ): number {\n    const R = 6371e3; // Earth radius in meters\n    const φ1 = (lat1 * Math.PI) / 180;\n    const φ2 = (lat2 * Math.PI) / 180;\n    const Δφ = ((lat2 - lat1) * Math.PI) / 180;\n    const Δλ = ((lng2 - lng1) * Math.PI) / 180;\n\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n  }\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-menu-button></ion-menu-button>\n        </ion-buttons>\n        <ion-title>Interactive Map</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content>\n    <div #mapPlotting id=\"mapPlotting\" style=\"height: 70vh; width: 100%;\"></div>\n\n    <ion-card>\n        <ion-card-header>\n            <ion-card-title>Drawing Tools</ion-card-title>\n        </ion-card-header>\n        <ion-card-content>\n            <ion-row>\n                <ion-col size=\"6\">\n                    <ion-button expand=\"block\" fill=\"solid\" color=\"primary\" (click)=\"startDrawing()\"\n                        [disabled]=\"isDrawing\">\n                        <ion-icon name=\"create\" slot=\"start\"></ion-icon>\n                        {{ isDrawing ? 'Drawing...' : 'Draw Polygon' }}\n                    </ion-button>\n                </ion-col>\n                <ion-col size=\"6\">\n                    <ion-button expand=\"block\" fill=\"outline\" color=\"secondary\" (click)=\"finishDrawing()\"\n                        [disabled]=\"!isDrawing || currentPolygonPoints.length < 3\">\n                        <ion-icon name=\"checkmark\" slot=\"start\"></ion-icon>\n                        Finish\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n            <ion-row>\n                <ion-col size=\"6\">\n                    <ion-button expand=\"block\" fill=\"outline\" color=\"warning\" (click)=\"clearPolygon()\"\n                        [disabled]=\"polygons.length === 0\">\n                        <ion-icon name=\"trash\" slot=\"start\"></ion-icon>\n                        Clear Last\n                    </ion-button>\n                </ion-col>\n                <ion-col size=\"6\">\n                    <ion-button expand=\"block\" fill=\"outline\" color=\"danger\" (click)=\"clearAllPolygons()\"\n                        [disabled]=\"polygons.length === 0\">\n                        <ion-icon name=\"trash\" slot=\"start\"></ion-icon>\n                        Clear All\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n            <ion-row>\n                <ion-col size=\"12\">\n                    <ion-button expand=\"block\" fill=\"outline\" color=\"tertiary\" (click)=\"enableDrawingManager()\"\n                        [disabled]=\"drawingManagerEnabled\">\n                        <ion-icon name=\"shapes\" slot=\"start\"></ion-icon>\n                        Google Drawing Tools\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n            <ion-item>\n                <ion-label>\n                    <h3>Status:</h3>\n                    <p [ngClass]=\"{'inside-geofence': isInsidePolygon, 'outside-geofence': !isInsidePolygon}\">\n                        {{ statusText }}\n                    </p>\n                </ion-label>\n            </ion-item>\n            <ion-item *ngIf=\"isDrawing && currentPolygonPoints.length > 0\">\n                <ion-label>\n                    <h3>Points: {{ currentPolygonPoints.length }}</h3>\n                    <p>Click on map to add points, then click \"Finish\" when done</p>\n                </ion-label>\n            </ion-item>\n            <ion-item *ngIf=\"polygons.length > 0\">\n                <ion-label>\n                    <h3>Total Polygons: {{ polygons.length }}</h3>\n                    <p>Multiple geofences created - different colors for each</p>\n                </ion-label>\n            </ion-item>\n        </ion-card-content>\n    </ion-card>\n</ion-content>"],"names":["RouterModule","MapPage","routes","path","component","MapPageRoutingModule","forChild","imports","i1","exports","CommonModule","FormsModule","IonicModule","MapPageModule","declarations","ElementRef","NgZone","ToastController","GeofenceService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r1","currentPolygonPoints","length","polygons","constructor","toastCtrl","geofenceService","ngZone","currentPolygon","allPolygonsData","isInsidePolygon","statusText","wasInPolygon","isDrawing","drawingManagerEnabled","tempMarkers","polygonCount","apiKey","enterSound","Audio","exitSound","ngOnInit","ngAfterViewInit","loadGoogleMaps","google","initializeMap","script","document","createElement","src","async","defer","onload","head","appendChild","navigator","geolocation","getCurrentPosition","position","userLatLng","lat","coords","latitude","lng","longitude","createMapAt","error","console","handleLocationError","fallbackLatLng","enableHighAccuracy","timeout","maximumAge","warn","code","PERMISSION_DENIED","create","message","duration","then","toast","present","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","centerLatLng","zoomLevel","mapOptions","center","zoom","mapTypeId","maps","MapTypeId","ROADMAP","map","Map","mapElement","nativeElement","marker","Marker","draggable","title","addListener","checkPolygonStatus","enablePolygonDrawing","startDrawing","run","onMapClick","bind","event","latLng","push","colors","color","tempMarker","icon","SymbolPath","CIRCLE","scale","fillColor","fillOpacity","strokeWeight","strokeColor","finishDrawing","_this","_asyncToGenerator","clearListeners","forEach","setMap","polygonData","Polygon","paths","strokeOpacity","editable","sendGeofenceToBackend","updatePolygonPoints","polygon","index","getPath","enableDrawingManager","drawingManager","drawing","DrawingManager","drawingMode","OverlayType","POLYGON","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","RECTANGLE","polygonOptions","overlay","setOptions","clearPolygon","lastPolygon","pop","Math","max","clearAllPolygons","markerPosition","getPosition","isInsideAny","polygonIndex","i","isInside","geometry","poly","containsLocation","handleGeofenceEntry","handleGeofenceExit","_this2","polygonText","log","play","catch","addMockEvent","header","_this3","fetchExternalEvents","response","fetch","ok","Error","data","json","Array","isArray","_ref","_ref2","_event$timestamp","_ref3","_ref4","_event$locationName","_ref5","_event$phoneNumber","_event$email","_event$type","_event$entryTimestamp","_event$exitTimestamp","_event$userDeviceInfo","location","undefined","ipAddress","deviceType","network","ip","device","platform","timestamp","entryTimestamp","exitTimestamp","locationName","name","phoneNumber","phone","email","type","userDeviceInfo","polygonPoints","polygonNumber","_this4","centroid","calculatePolygonCentroid","radius","calculatePolygonRadius","geofenceData","round","activeFrom","Date","toISOString","activeTo","now","result","sendPolygonsToBackend","points","centroidLat","centroidLng","point","maxDistance","distance","calculateDistance","lat1","lng1","lat2","lng2","R","φ1","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","ɵɵdirectiveInject","i2","selectors","viewQuery","MapPage_Query","rf","ctx","ɵɵelement","ɵɵlistener","MapPage_Template_ion_button_click_16_listener","ɵɵrestoreView","_r1","ɵɵresetView","MapPage_Template_ion_button_click_20_listener","MapPage_Template_ion_button_click_25_listener","MapPage_Template_ion_button_click_29_listener","MapPage_Template_ion_button_click_34_listener","ɵɵtemplate","MapPage_ion_item_43_Template","MapPage_ion_item_44_Template","ɵɵproperty","ɵɵpureFunction2","_c1"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}