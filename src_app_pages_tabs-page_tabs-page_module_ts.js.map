{"version":3,"file":"src_app_pages_tabs-page_tabs-page_module_ts.js","mappings":"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","sources":["./src/app/pages/activity-log/activity-log-routing.module.ts","./src/app/pages/activity-log/activity-log.module.ts","./src/app/pages/activity-log/activity-log.page.ts","./src/app/pages/activity-log/activity-log.page.html","./src/app/pages/tabs-page/tabs-page-routing.module.ts","./src/app/pages/tabs-page/tabs-page.module.ts","./src/app/pages/tabs-page/tabs-page.ts","./src/app/pages/tabs-page/tabs-page.html","./src/app/pages/users/users-routing.module.ts","./src/app/pages/users/users.module.ts","./src/app/pages/users/users.page.ts","./src/app/pages/users/users.page.html","./src/app/providers/geofence.service.ts","./node_modules/@capacitor/device/dist/esm/index.js","./node_modules/@capacitor/network/dist/esm/index.js"],"sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { ActivityLogPage } from \"./activity-log.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ActivityLogPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ActivityLogPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\nimport { ActivityLogPage } from \"./activity-log.page\";\nimport { ActivityLogPageRoutingModule } from \"./activity-log-routing.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ActivityLogPageRoutingModule,\n  ],\n  declarations: [ActivityLogPage],\n})\nexport class ActivityLogModule {}\n","// ...existing code...\nimport { Component, OnInit } from \"@angular/core\";\nimport {\n  GeofenceService,\n  GeofenceEvent,\n} from \"../../providers/geofence.service\";\n\n@Component({\n  selector: \"app-activity-log\",\n  templateUrl: \"./activity-log.page.html\",\n  styleUrls: [\"./activity-log.page.scss\"],\n})\nexport class ActivityLogPage implements OnInit {\n  isMobile(): boolean {\n    // Basic check for mobile devices\n    return /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n  }\n  geofenceEvents: GeofenceEvent[] = [];\n\n  constructor(private geofenceService: GeofenceService) {}\n\n  ngOnInit() {\n    console.log(\"ActivityLogPage: ngOnInit called\");\n    this.loadEvents();\n\n    // Refresh events every 10 seconds\n    setInterval(() => {\n      this.loadEvents();\n    }, 10000);\n  }\n\n  loadEvents() {\n    console.log(\"ActivityLogPage: Loading events...\");\n    this.geofenceEvents = this.geofenceService.getGeofenceEvents();\n    console.log(\"ActivityLogPage: Loaded events:\", this.geofenceEvents.length);\n  }\n\n  formatTimestamp(timestamp: number): string {\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  }\n\n  formatDuration(duration: number): string {\n    if (!duration) return \"\";\n\n    const hours = Math.floor(duration / (1000 * 60 * 60));\n    const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((duration % (1000 * 60)) / 1000);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${seconds}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  getEventColor(type: string): string {\n    return type === \"enter\" ? \"success\" : \"warning\";\n  }\n\n  getEventIcon(type: string): string {\n    return type === \"enter\" ? \"enter\" : \"exit\";\n  }\n\n  getEntriesCount(): number {\n    return this.geofenceEvents.filter((event) => event.type === \"enter\").length;\n  }\n\n  getExitsCount(): number {\n    return this.geofenceEvents.filter((event) => event.type === \"exit\").length;\n  }\n\n  addSampleEntry() {\n    this.geofenceService.addMockEvent(\"enter\");\n    this.loadEvents();\n  }\n\n  addSampleExit() {\n    this.geofenceService.addMockEvent(\"exit\");\n    this.loadEvents();\n  }\n\n  clearEvents() {\n    this.geofenceService.clearEvents();\n    this.loadEvents();\n  }\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\" *ngIf=\"!isMobile()\">\n            <ion-menu-button></ion-menu-button>\n        </ion-buttons>\n        <ion-title>Activity Log</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content>\n    <ion-card>\n        <ion-card-header>\n            <ion-card-title>Geofence Entry/Exit History</ion-card-title>\n            <ion-card-subtitle>Recent activity in Trinidad area</ion-card-subtitle>\n        </ion-card-header>\n        <ion-card-content>\n            <div class=\"ion-padding\">\n                <div class=\"table-container\" *ngIf=\"geofenceEvents.length > 0; else noEvents\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Type</th>\n                                <th>Timestamp</th>\n                                <th>Location</th>\n                                <th>User ID</th>\n                                <th>Device</th>\n                                <th>Duration</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let event of geofenceEvents\">\n                                <td data-label=\"Type\">\n                                    <ion-chip [color]=\"getEventColor(event.type)\">\n                                        <ion-icon [name]=\"getEventIcon(event.type)\"></ion-icon>\n                                        <ion-label>{{ event.type.toUpperCase() }}</ion-label>\n                                    </ion-chip>\n                                </td>\n                                <td data-label=\"Timestamp\">{{ formatTimestamp(event.timestamp) }}</td>\n                                <td data-label=\"Location\">{{ event.location.latitude.toFixed(4) }}, {{\n                                    event.location.longitude.toFixed(4) }}\n                                </td>\n                                <td data-label=\"User ID\">\n                                    <code>{{ event.userId }}</code>\n                                </td>\n                                <td data-label=\"Device\">\n                                    <span *ngIf=\"event.userDeviceInfo\">{{ event.userDeviceInfo.model ||\n                                        event.userDeviceInfo.platform || 'Unknown' }}</span>\n                                </td>\n                                <td data-label=\"Duration\">\n                                    <span *ngIf=\"event.duration && event.type === 'exit'\">{{\n                                        formatDuration(event.duration) }}</span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <ng-template #noEvents>\n                <ion-item>\n                    <ion-icon name=\"time\" slot=\"start\"></ion-icon>\n                    <ion-label>\n                        <h3>No activity recorded yet</h3>\n                        <p>Enter and exit the Trinidad geofence area to see activity logs</p>\n                    </ion-label>\n                </ion-item>\n            </ng-template>\n        </ion-card-content>\n    </ion-card>\n\n    <!-- Statistics Card -->\n    <ion-card *ngIf=\"geofenceEvents.length > 0\">\n        <ion-card-header>\n            <ion-card-title>Statistics</ion-card-title>\n        </ion-card-header>\n        <ion-card-content>\n            <ion-grid>\n                <ion-row>\n                    <ion-col size=\"6\">\n                        <ion-item lines=\"none\">\n                            <ion-icon name=\"enter\" color=\"success\" slot=\"start\"></ion-icon>\n                            <ion-label>\n                                <h3>{{ getEntriesCount() }}</h3>\n                                <p>Entries</p>\n                            </ion-label>\n                        </ion-item>\n                    </ion-col>\n                    <ion-col size=\"6\">\n                        <ion-item lines=\"none\">\n                            <ion-icon name=\"exit\" color=\"warning\" slot=\"start\"></ion-icon>\n                            <ion-label>\n                                <h3>{{ getExitsCount() }}</h3>\n                                <p>Exits</p>\n                            </ion-label>\n                        </ion-item>\n                    </ion-col>\n                </ion-row>\n            </ion-grid>\n        </ion-card-content>\n    </ion-card>\n\n</ion-content>","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { TabsPage } from \"./tabs-page\";\n\nconst routes: Routes = [\n  {\n    path: \"tabs\",\n    component: TabsPage,\n    children: [\n      {\n        path: \"users\",\n        loadChildren: () =>\n          import(\"../users/users.module\").then((m) => m.UsersPageModule),\n      },\n      {\n        path: \"map\",\n        loadChildren: () =>\n          import(\"../map/map.module\").then((m) => m.MapPageModule),\n      },\n      {\n        path: \"activity-log\",\n        loadChildren: () =>\n          import(\"../activity-log/activity-log.module\").then(\n            (m) => m.ActivityLogModule\n          ),\n      },\n      {\n        path: \"\",\n        redirectTo: \"/app/tabs/map\",\n        pathMatch: \"full\",\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TabsPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { TabsPage } from \"./tabs-page\";\nimport { TabsPageRoutingModule } from \"./tabs-page-routing.module\";\n\nimport { ActivityLogModule } from \"../activity-log/activity-log.module\";\nimport { UsersPageModule } from \"../users/users.module\";\n\n@NgModule({\n  imports: [\n    ActivityLogModule,\n    UsersPageModule,\n    CommonModule,\n    IonicModule,\n    TabsPageRoutingModule,\n  ],\n  declarations: [TabsPage],\n})\nexport class TabsModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'tabs-page.html'\n})\nexport class TabsPage {}\n","<ion-tabs>\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"users\">\n      <ion-icon name=\"people\"></ion-icon>\n      <ion-label>Users</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"map\">\n      <ion-icon name=\"location\"></ion-icon>\n      <ion-label>Map</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"activity-log\">\n      <ion-icon name=\"list\"></ion-icon>\n      <ion-label>Activity Log</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { UsersPage } from \"./users.page\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: UsersPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UsersPageRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule } from \"@angular/forms\";\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { UsersPageRoutingModule } from \"./users-routing.module\";\nimport { UsersPage } from \"./users.page\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, UsersPageRoutingModule],\n  declarations: [UsersPage],\n})\nexport class UsersPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { GeofenceService, UserInfo } from \"../../providers/geofence.service\";\n\n@Component({\n  selector: \"app-users\",\n  templateUrl: \"./users.page.html\",\n  styleUrls: [\"./users.page.scss\"],\n})\nexport class UsersPage implements OnInit {\n  users: UserInfo[] = [];\n\n  constructor(private geofenceService: GeofenceService) {}\n\n  ngOnInit() {\n    this.loadUsers();\n    setInterval(() => {\n      this.loadUsers();\n    }, 5000); // Refresh every 5 seconds\n  }\n\n  loadUsers() {\n    const currentUser = this.geofenceService.getCurrentUser();\n    const otherUsers = this.geofenceService.getUsers();\n    this.users = currentUser ? [currentUser, ...otherUsers] : otherUsers;\n  }\n\n  formatTimestamp(timestamp: number): string {\n    return new Date(timestamp).toLocaleString();\n  }\n\n  getStatusColor(status: string) {\n    switch (status) {\n      case \"inside\":\n        return \"success\";\n      case \"outside\":\n        return \"medium\";\n      case \"entering\":\n        return \"primary\";\n      case \"exiting\":\n        return \"warning\";\n      default:\n        return \"medium\";\n    }\n  }\n}\n","<ion-header>\n    <ion-toolbar>\n        <ion-buttons slot=\"start\">\n            <ion-menu-button></ion-menu-button>\n        </ion-buttons>\n        <ion-title>Users</ion-title>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content>\n    <ion-card>\n        <ion-card-header>\n            <ion-card-title>User List</ion-card-title>\n            <ion-card-subtitle>Users currently being tracked</ion-card-subtitle>\n        </ion-card-header>\n        <ion-card-content>\n            <ion-list *ngIf=\"users.length > 0; else noUsers\">\n                <ion-item *ngFor=\"let user of users\">\n                    <ion-avatar slot=\"start\">\n                        <ion-icon name=\"person-circle\" class=\"user-avatar\"></ion-icon>\n                    </ion-avatar>\n                    <ion-label>\n                        <h2>{{ user.id }}</h2>\n                        <p>Status: <ion-badge [color]=\"getStatusColor(user.geofenceStatus)\">{{ user.geofenceStatus\n                                }}</ion-badge></p>\n                        <p>Last Seen: {{ formatTimestamp(user.lastSeen) }}</p>\n                    </ion-label>\n                </ion-item>\n            </ion-list>\n            <ng-template #noUsers>\n                <ion-item>\n                    <ion-icon name=\"people-outline\" slot=\"start\"></ion-icon>\n                    <ion-label>No users to display.</ion-label>\n                </ion-item>\n            </ng-template>\n        </ion-card-content>\n    </ion-card>\n</ion-content>","import { Injectable } from \"@angular/core\";\nimport { Device } from \"@capacitor/device\";\nimport { Geolocation } from \"@capacitor/geolocation\";\nimport { Network } from \"@capacitor/network\";\n\nexport interface UserInfo {\n  id: string;\n  deviceInfo: any;\n  networkInfo: any;\n  location: {\n    latitude: number;\n    longitude: number;\n    accuracy: number;\n    timestamp: number;\n  };\n  geofenceStatus: \"inside\" | \"outside\" | \"entering\" | \"exiting\";\n  lastSeen: number;\n}\n\nexport interface GeofenceEvent {\n  userId: string;\n  userDeviceInfo: any;\n  type: \"enter\" | \"exit\";\n  timestamp: number;\n  location: {\n    latitude: number;\n    longitude: number;\n  };\n  duration?: number; // in milliseconds, for exit events\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class GeofenceService {\n  private geofenceCenter = { lat: 10.6918, lng: -61.2225 }; // Trinidad coordinates\n  private geofenceRadius = 1000; // 1km radius\n  private users: UserInfo[] = [];\n  private currentUser: UserInfo | null = null;\n  private geofenceEvents: GeofenceEvent[] = [];\n  private watchId: string | undefined;\n  private entryTime: number | null = null;\n\n  constructor() {\n    this.initializeCurrentUser();\n  }\n\n  async initializeCurrentUser() {\n    try {\n      const deviceInfo = await Device.getInfo();\n      const networkInfo = await Network.getStatus();\n      const position = await Geolocation.getCurrentPosition();\n\n      this.currentUser = {\n        id: this.generateUserId(),\n        deviceInfo,\n        networkInfo,\n        location: {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy || 0,\n          timestamp: Date.now(),\n        },\n        geofenceStatus: this.isInsideGeofence(\n          position.coords.latitude,\n          position.coords.longitude\n        )\n          ? \"inside\"\n          : \"outside\",\n        lastSeen: Date.now(),\n      };\n\n      // Start watching position\n      this.startWatchingPosition();\n    } catch (error) {\n      console.error(\"Error initializing user:\", error);\n    }\n  }\n\n  private generateUserId(): string {\n    return \"user_\" + Math.random().toString(36).substr(2, 9) + \"_\" + Date.now();\n  }\n\n  private isInsideGeofence(lat: number, lng: number): boolean {\n    const distance = this.calculateDistance(\n      lat,\n      lng,\n      this.geofenceCenter.lat,\n      this.geofenceCenter.lng\n    );\n    return distance <= this.geofenceRadius;\n  }\n\n  private calculateDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number\n  ): number {\n    const R = 6371e3; // Earth radius in meters\n    const φ1 = (lat1 * Math.PI) / 180;\n    const φ2 = (lat2 * Math.PI) / 180;\n    const Δφ = ((lat2 - lat1) * Math.PI) / 180;\n    const Δλ = ((lng2 - lng1) * Math.PI) / 180;\n\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n  }\n\n  async startWatchingPosition() {\n    try {\n      this.watchId = await Geolocation.watchPosition({}, (position, err) => {\n        if (position && this.currentUser) {\n          const wasInside = this.currentUser.geofenceStatus === \"inside\";\n          const isNowInside = this.isInsideGeofence(\n            position.coords.latitude,\n            position.coords.longitude\n          );\n\n          // Update current user location\n          this.currentUser.location = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n            accuracy: position.coords.accuracy || 0,\n            timestamp: Date.now(),\n          };\n          this.currentUser.lastSeen = Date.now();\n\n          // Check for geofence transitions\n          if (!wasInside && isNowInside) {\n            // Entering geofence\n            this.currentUser.geofenceStatus = \"entering\";\n            this.entryTime = Date.now();\n            this.recordGeofenceEvent(\"enter\");\n            setTimeout(() => {\n              if (this.currentUser) this.currentUser.geofenceStatus = \"inside\";\n            }, 1000);\n          } else if (wasInside && !isNowInside) {\n            // Exiting geofence\n            this.currentUser.geofenceStatus = \"exiting\";\n            const duration = this.entryTime ? Date.now() - this.entryTime : 0;\n            this.recordGeofenceEvent(\"exit\", duration);\n            this.entryTime = null;\n            setTimeout(() => {\n              if (this.currentUser) this.currentUser.geofenceStatus = \"outside\";\n            }, 1000);\n          } else if (isNowInside) {\n            this.currentUser.geofenceStatus = \"inside\";\n          } else {\n            this.currentUser.geofenceStatus = \"outside\";\n          }\n        }\n\n        if (err) {\n          console.error(\"Position watch error:\", err);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error starting position watch:\", error);\n    }\n  }\n\n  private recordGeofenceEvent(type: \"enter\" | \"exit\", duration?: number) {\n    if (!this.currentUser) return;\n\n    const event: GeofenceEvent = {\n      userId: this.currentUser.id,\n      userDeviceInfo: this.currentUser.deviceInfo,\n      type,\n      timestamp: Date.now(),\n      location: {\n        latitude: this.currentUser.location.latitude,\n        longitude: this.currentUser.location.longitude,\n      },\n      duration,\n    };\n\n    this.geofenceEvents.unshift(event); // Add to beginning\n\n    // Keep only last 50 events\n    if (this.geofenceEvents.length > 50) {\n      this.geofenceEvents = this.geofenceEvents.slice(0, 50);\n    }\n  }\n\n  getCurrentUser(): UserInfo | null {\n    return this.currentUser;\n  }\n\n  getUsers(): UserInfo[] {\n    // In a real app, this would come from a server\n    // For demo, we'll simulate other users\n    return this.users;\n  }\n\n  getUsersInGeofence(): UserInfo[] {\n    return this.users.filter((user) => user.geofenceStatus === \"inside\");\n  }\n\n  getGeofenceEvents(): GeofenceEvent[] {\n    return this.geofenceEvents;\n  }\n\n  getGeofenceCenter() {\n    return this.geofenceCenter;\n  }\n\n  getGeofenceRadius() {\n    return this.geofenceRadius;\n  }\n\n  async stopWatching() {\n    if (this.watchId) {\n      await Geolocation.clearWatch({ id: this.watchId });\n    }\n  }\n\n  // Simulate adding other users (in real app, this would be real-time data)\n  simulateOtherUsers() {\n    const mockUsers: UserInfo[] = [\n      {\n        id: \"user_mock_1\",\n        deviceInfo: {\n          model: \"iPhone 12\",\n          platform: \"ios\",\n          operatingSystem: \"ios\",\n          osVersion: \"15.0\",\n          manufacturer: \"Apple\",\n        },\n        networkInfo: {\n          connected: true,\n          connectionType: \"wifi\",\n        },\n        location: {\n          latitude: 10.692,\n          longitude: -61.222,\n          accuracy: 5,\n          timestamp: Date.now() - 30000,\n        },\n        geofenceStatus: \"inside\",\n        lastSeen: Date.now() - 30000,\n      },\n      {\n        id: \"user_mock_2\",\n        deviceInfo: {\n          model: \"Samsung Galaxy S21\",\n          platform: \"android\",\n          operatingSystem: \"android\",\n          osVersion: \"11\",\n          manufacturer: \"Samsung\",\n        },\n        networkInfo: {\n          connected: true,\n          connectionType: \"4g\",\n        },\n        location: {\n          latitude: 10.6915,\n          longitude: -61.223,\n          accuracy: 8,\n          timestamp: Date.now() - 60000,\n        },\n        geofenceStatus: \"inside\",\n        lastSeen: Date.now() - 60000,\n      },\n    ];\n\n    this.users = mockUsers;\n  }\n\n  // Methods for activity log testing\n  addMockEvent(type: \"enter\" | \"exit\") {\n    const mockEvent: GeofenceEvent = {\n      userId: this.currentUser?.id || \"mock_user_\" + Date.now(),\n      userDeviceInfo: this.currentUser?.deviceInfo || {\n        model: \"Mock Device\",\n        platform: \"web\",\n        operatingSystem: \"unknown\",\n        osVersion: \"1.0\",\n        manufacturer: \"Mock\",\n      },\n      type,\n      timestamp: Date.now(),\n      location: {\n        latitude: 10.6918 + (Math.random() - 0.5) * 0.001,\n        longitude: -61.2225 + (Math.random() - 0.5) * 0.001,\n      },\n      duration:\n        type === \"exit\"\n          ? Math.floor(Math.random() * 300000) + 60000\n          : undefined, // 1-5 minutes\n    };\n\n    this.geofenceEvents.unshift(mockEvent);\n\n    // Keep only last 50 events\n    if (this.geofenceEvents.length > 50) {\n      this.geofenceEvents = this.geofenceEvents.slice(0, 50);\n    }\n  }\n\n  clearEvents() {\n    this.geofenceEvents = [];\n  }\n\n  // Add some initial sample data for demonstration\n  addInitialSampleData() {\n    // if (this.geofenceEvents.length === 0) {\n    //   // Add some sample events from the past\n    //   const sampleEvents: GeofenceEvent[] = [\n    //     {\n    //       userId: \"sample_user_1\",\n    //       userDeviceInfo: {\n    //         model: \"iPhone 12\",\n    //         platform: \"ios\",\n    //         operatingSystem: \"ios\",\n    //         osVersion: \"15.0\",\n    //         manufacturer: \"Apple\",\n    //       },\n    //       type: \"enter\",\n    //       timestamp: Date.now() - 3600000, // 1 hour ago\n    //       location: { latitude: 10.6918, longitude: -61.2225 },\n    //     },\n    //     {\n    //       userId: \"sample_user_1\",\n    //       userDeviceInfo: {\n    //         model: \"iPhone 12\",\n    //         platform: \"ios\",\n    //         operatingSystem: \"ios\",\n    //         osVersion: \"15.0\",\n    //         manufacturer: \"Apple\",\n    //       },\n    //       type: \"exit\",\n    //       timestamp: Date.now() - 1800000, // 30 minutes ago\n    //       location: { latitude: 10.692, longitude: -61.2227 },\n    //       duration: 1800000, // 30 minutes\n    //     },\n    //     {\n    //       userId: \"sample_user_2\",\n    //       userDeviceInfo: {\n    //         model: \"Samsung Galaxy S21\",\n    //         platform: \"android\",\n    //         operatingSystem: \"android\",\n    //         osVersion: \"11\",\n    //         manufacturer: \"Samsung\",\n    //       },\n    //       type: \"enter\",\n    //       timestamp: Date.now() - 900000, // 15 minutes ago\n    //       location: { latitude: 10.6916, longitude: -61.2223 },\n    //     },\n    //   ];\n    //   this.geofenceEvents = sampleEvents;\n    // }\n  }\n}\n","import { registerPlugin } from '@capacitor/core';\nconst Device = registerPlugin('Device', {\n    web: () => import('./web').then(m => new m.DeviceWeb()),\n});\nexport * from './definitions';\nexport { Device };\n","import { registerPlugin } from '@capacitor/core';\nconst Network = registerPlugin('Network', {\n    web: () => import('./web').then(m => new m.NetworkWeb()),\n});\nexport * from './definitions';\nexport { Network };\n"],"names":["RouterModule","ActivityLogPage","routes","path","component","ActivityLogPageRoutingModule","forChild","imports","i1","exports","CommonModule","FormsModule","IonicModule","ActivityLogModule","declarations","GeofenceService","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate","event_r1","userDeviceInfo","model","platform","ctx_r1","formatDuration","duration","ɵɵtemplate","ActivityLogPage_div_14_tr_17_span_14_Template","ActivityLogPage_div_14_tr_17_span_16_Template","ɵɵproperty","getEventColor","type","getEventIcon","toUpperCase","formatTimestamp","timestamp","ɵɵtextInterpolate2","location","latitude","toFixed","longitude","userId","ActivityLogPage_div_14_tr_17_Template","geofenceEvents","getEntriesCount","getExitsCount","isMobile","test","navigator","userAgent","constructor","geofenceService","ngOnInit","console","log","loadEvents","setInterval","getGeofenceEvents","length","date","Date","toLocaleString","hours","Math","floor","minutes","seconds","filter","event","addSampleEntry","addMockEvent","addSampleExit","clearEvents","ɵɵdirectiveInject","selectors","decls","vars","consts","template","ActivityLogPage_Template","rf","ctx","ActivityLogPage_ion_buttons_2_Template","ActivityLogPage_div_14_Template","ActivityLogPage_ng_template_15_Template","ɵɵtemplateRefExtractor","ActivityLogPage_ion_card_17_Template","noEvents_r3","TabsPage","children","loadChildren","then","m","UsersPageModule","MapPageModule","redirectTo","pathMatch","TabsPageRoutingModule","TabsModule","TabsPage_Template","UsersPage","UsersPageRoutingModule","user_r1","id","getStatusColor","geofenceStatus","ɵɵtextInterpolate1","lastSeen","UsersPage_ion_list_14_ion_item_1_Template","users","loadUsers","currentUser","getCurrentUser","otherUsers","getUsers","status","UsersPage_Template","UsersPage_ion_list_14_Template","UsersPage_ng_template_15_Template","noUsers_r3","Device","Geolocation","Network","geofenceCenter","lat","lng","geofenceRadius","entryTime","initializeCurrentUser","_this","_asyncToGenerator","deviceInfo","getInfo","networkInfo","getStatus","position","getCurrentPosition","generateUserId","coords","accuracy","now","isInsideGeofence","startWatchingPosition","error","random","toString","substr","distance","calculateDistance","lat1","lng1","lat2","lng2","R","φ1","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","_this2","watchId","watchPosition","err","wasInside","isNowInside","recordGeofenceEvent","setTimeout","unshift","slice","getUsersInGeofence","user","getGeofenceCenter","getGeofenceRadius","stopWatching","_this3","clearWatch","simulateOtherUsers","mockUsers","operatingSystem","osVersion","manufacturer","connected","connectionType","_this$currentUser","_this$currentUser2","mockEvent","undefined","addInitialSampleData","factory","ɵfac","providedIn","registerPlugin","web","DeviceWeb","NetworkWeb"],"sourceRoot":"webpack:///","x_google_ignoreList":[13,14]}